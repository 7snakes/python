# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.
def num_div(num1, num2):
    try:
        return num1 / num2
    except ZeroDivisionError:
        print("Zero division error")
    return None


print("Result is: {}".format(num_div(int(input("Enter num1: ")), int(input("Enter num2: ")))))


# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя: имя, фамилия, год рождения, город проживания, email, телефон.
#    Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.
def show_me_user_info(name="", surname="", bd="", city="", email="", phone=""):
    print("name: {}, surname: {}, bd: {}, city: {}, email: {}, phone: {}".format(name, surname, bd, city, email, phone))


show_me_user_info(name=input("имя: "), surname=input("фамилия: "), bd=input("год рождения: "), city=input("город проживания: "), email=input("email: "), phone=input("телефон: "))


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.

def my_func(num1, num2, num3):
    return num1 + num2 + num3 - min(num1, num2, num3)


print(my_func(1, 2, 3))


# 4. Программа принимает действительное положительное число x и целое отрицательное число y. Необходимо выполнить возведение числа x в степень y.
#    Задание необходимо реализовать в виде функции my_func(x, y). При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
#    Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
def my_func1(x, y):
    return x ** y


def my_func2(x, y):
    for i in range(abs(y) - 1):
        x = x * x
    return 1 / x


print(my_func1(4, -2))
print(my_func2(4, -2))


# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом. При нажатии Enter должна выводиться сумма чисел. Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
#    Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме. Но если вместо числа вводится специальный символ, выполнение программы завершается.
#    Если специальный символ введен после нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.
def calculate_values(num_str_array, global_sum_value):
    for i in range(len(num_str_array)):
        if num_str_array[i] != "\\q":
            global_sum_value += int(num_str_array[i])
        else:
            print(global_sum_value)
            return False, global_sum_value
    print(global_sum_value)
    return True, global_sum_value


is_ok = True
sum_value = 0
while is_ok:
    is_ok, sum_value = calculate_values(input("Enter numbers: ").split(" "), sum_value)


# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой. Например, print(int_func(‘text’)) -> Text.
#    Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом. Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
#    Необходимо использовать написанную ранее функцию int_func().
def int_func(text):
    return text.title()


print(int_func("text"))
